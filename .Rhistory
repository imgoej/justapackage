suppressMessages (print(p))
return(list(DATA.print, intersect.results))
}
X <- cam_per_d0(data = OSLdata[, c("ED", "ED_Err","Param2")],
minD0 = seq(0, 400, 25), # <--- CHANGE THIS TO SELECT DIFFERENT D0 CRITERIA.
method = "CAM")
library(Luminescence)
library(ggplot2)
X <- cam_per_d0(data = OSLdata[, c("ED", "ED_Err","Param2")],
minD0 = seq(0, 400, 25), # <--- CHANGE THIS TO SELECT DIFFERENT D0 CRITERIA.
method = "CAM")
X <- cam_per_d0(data = OSLdata[, c("ED", "ED_Err","Param2")],
minD0 = seq(0, 400, 25), # <--- CHANGE THIS TO SELECT DIFFERENT D0 CRITERIA.
method = "CAM", sigma_m = 0.17)
X <- cam_per_d0(data = OSLdata[, c("ED", "ED_Err","Param2")],
minD0 = seq(0, 450, 25), # <--- CHANGE THIS TO SELECT DIFFERENT D0 CRITERIA.
method = "CAM", sigma_m = 0.17)
# --------------------------------------------#
# ----------------   SETUP   ---------------- #
# ------------------------------------------- #
# set working directory
setwd("C:/Users/fhaba/Desktop")
library(devtools)
# install and load my package
devtools::install_github("IMHarly/justapackage", force = TRUE)
library(justapackage)
# --------------------------------------------#
# ---------------- READ DATA ---------------- #
# ------------------------------------------- #
# data from csv
csv.data <- "TA2247.csv"
OSLdata <- as.data.frame(read.csv(csv.data, header = T, na.strings = c("NA", "na", "Na", "nA", "", "NaN", "NAN", "nan"), stringsAsFactors = T, sep = ","))
# --------------------------------------------#
# ---------------- ANALYSIS -------------------- #
# ------------------------------------------- #
X <- cam_per_d0(OSLdata[, c("ED", "ED_Err","Param2")],
minD0 = seq(0, 400, 25), # <--- CHANGE THIS TO SELECT DIFFERENT D0 CRITERIA.
method = "CAM")
# --------------------------------------------#
# ---------------- ANALYSIS -------------------- #
# ------------------------------------------- #
X <- cam_per_d0(OSLdata[, c("ED", "ED_Err","Param2")],
minD0 = seq(0, 400, 25), # <--- CHANGE THIS TO SELECT DIFFERENT D0 CRITERIA.
method = "CAM", sigma_m)
# --------------------------------------------#
# ---------------- ANALYSIS -------------------- #
# ------------------------------------------- #
X <- cam_per_d0(OSLdata[, c("ED", "ED_Err","Param2")],
minD0 = seq(0, 400, 25), # <--- CHANGE THIS TO SELECT DIFFERENT D0 CRITERIA.
method = "CAM", sigma_m = 0.17)
# --------------------------------------------#
# ---------------- ANALYSIS -------------------- #
# ------------------------------------------- #
X <- cam_per_d0(OSLdata[, c("ED", "ED_Err","Param2")],
minD0 = seq(0, 400, 100), # <--- CHANGE THIS TO SELECT DIFFERENT D0 CRITERIA.
method = "CAM", sigma_m = 0.17)
install.packages("deming")
library(deming)
x1 = 200
x2 = 300
y1 = 262
y2 = 271
x = rbind(x1, x2)
x
rbind(x1, x2)
c(x1, x2)
data = data.frame("x" = c(x1, x2),
"y" = c(y1, y2)
)
data
data = data.frame("x" = c(x1, x2),
"y" = c(y1, y2),
"dx" = c(0, 0),
"dy" = c(20, 56)
)
data
deming(y ~ x, data = data, ystd = data$dy)
data = data.frame("x" = c(x1, x2, 400),
"y" = c(y1, y2, 400),
"dx" = c(0, 0),
"dy" = c(20, 56)
)
data = data.frame("x" = c(x1, x2, 400),
"y" = c(y1, y2, 400),
"dx" = c(0, 0, 0),
"dy" = c(20, 56, 72)
)
deming(y ~ x, data = data, ystd = data$dy, )
deming(y ~ x, data = data, ystd = data$dy, xstd = data$dx)
lm(data = data, y ~ x)
data = data.frame("x" = c(x1, x2),
"y" = c(y1, y2),
"dx" = c(0, 0),
"dy" = c(20, 56)
)
lm(data = data, y ~ x)
coef(lm(data = data, y ~ x))
summary(lm(data = data, y ~ x))
install.packages("boot")
install.packages("boot")
library("boot")
devtools::install_github("IMHarly/justapackage")
3
devtools::install_github("IMHarly/justapackage")
devtools::document()
devtools::document()
devtools::document()
devtools::install_github("IMHarly/justapackage")
remove.packages("justapackage")
devtools::install_github("IMHarly/justapackage")
devtools::install_github("IMHarly/justapackage")
detach(justapackage)
detach("justapackage")
remove.packages("justapackage")
devtools::install_github("IMHarly/justapackage")
detach("justapackage", unload = TRUE)
devtools::install_github("IMHarly/justapackage")
3
getwd()
library()
library(devtools)
library(devtools)
document()
document()
library(justapackage)
document()
document()
getwd()
install.packages(dtupdate)
install.packages("dtupdate")
detach(justapackage)
detach("justapackage")
library(justapackage)
detach("justapackage")
detach("justapackage",force = TRUE)
detach(justapackage,force = TRUE)
detach(justapackage,unload = TRUE)
detach("justapackage", unload = TRUE)
detach("package:justapackage", unload = TRUE)
remove.packages("justapackage")
devtools::install_github("IMHarly/justapackage")
devtools::install_github("IMHarly/justapackage")
2+2
library(justapackage)
subsample.folder.name = c("188701","188702")
getwd()
path = getwd()
# setup folder paths
folder = paste(path, subsample.folder.name, sep ="")
folder
dir.create(path = folder)
paste(folder,"/",sep="")
folder
length(path)
length(folder)
apply(1:length(folder), dir.create(path = folder[x]))
apply(1:length(folder), FUN = dir.create(path = folder[x]))
dir.create(path = list(folder))
list(folder)
subsample.folder.name = c("188701","188702")
path = getwd()
# setup folder paths
folder = paste(path, subsample.folder.name, sep ="")
folder
apply(1:length(folder), FUN = dir.create(path = folder))
subsample.folder.name = c("188701","188702")
path = getwd()
# setup folder paths
folder = paste(path, subsample.folder.name, sep ="")
folder[j]
for (j in 1:length(folder)){
dir.create(path = list(folder[j]))
}
for (j in 1:length(folder)){
dir.create(path = folder[j])
}
folder[j]
subsample.folder.name = c("188701","188702")
path = getwd()
# setup folder paths
folder = paste(path, subsample.folder.name, sep ="")
folder
path = paste(getwd(),"/",sep="")
path
# setup folder paths
folder = paste(path, subsample.folder.name, sep ="")
folder
for (j in 1:length(folder)){
dir.create(path = folder[j])
}
subsample.folder.name = c("188701")
path = paste(getwd(),"/",sep="")
# setup folder paths
folder = paste(path, subsample.folder.name, sep ="")
subsample.folder.name = c("188701")
path = paste(getwd(),"/",sep="")
# setup folder paths
folder = paste(path, subsample.folder.name, sep ="")
for (j in 1:length(folder)){
dir.create(path = folder[j])
}
folder
BayLum_files_path = paste(folder,"/",sep="")
BayLum_files_path
subsample.folder.name = c("188701","188702")
path = paste(getwd(),"/",sep="")
# setup folder paths
folder = paste(path, subsample.folder.name, sep ="")
for (j in 1:length(folder)){
dir.create(path = folder[j])
}
BayLum_files_path = paste(folder,"/",sep="")
BayLum_files_path
DRenv = 2
DRenv.error = 0.1
# DoseEnv
write.csv(data.frame("obs"=DRenv , "var" = DRenv.error^2), paste(BayLum_files_path,"DoseEnv.csv",sep=""), row.names = F)
length(BayLum_files_path)
DRenv.error = c(0.1,0.2)
# DoseEnv
for (j in 1:length(BayLum_files_path)) { write.csv(data.frame("obs"=DRenv[j] , "var" = DRenv.error[j]^2), paste(BayLum_files_path[j],"DoseEnv.csv",sep=""), row.names = F) }
DRenv = c(2,3)
DRenv.error = c(0.1,0.2)
# DoseEnv
for (j in 1:length(BayLum_files_path)) { write.csv(data.frame("obs"=DRenv[j] , "var" = DRenv.error[j]^2), paste(BayLum_files_path[j],"DoseEnv.csv",sep=""), row.names = F) }
signal.integral = c(1:5, 1:6)
signal.integral
subsample.folder.name = c("188701","188702")
path = paste(getwd(),"/",sep="")
DRenv = c(2,3)
DRenv.error = c(0.1,0.2)
begin.signal.integral = c(5, 5)
end.signal.integral = c(10, 10)
begin.background.integral = c(350, 350)
end.background.integral = c(400, 400)
subsample.folder.name = c("188701","188702")
path = paste(getwd(),"/",sep="")
DRenv = c(2,3)
DRenv.error = c(0.1,0.2)
begin.signal.integral = c(5, 5)
end.signal.integral = c(10, 10)
begin.background.integral = c(350, 350)
end.background.integral = c(400, 400)
# setup folder paths
folder = paste(path, subsample.folder.name, sep ="")
for (j in 1:length(folder)){ dir.create(path = folder[j]) }
BayLum_files_path = paste(folder,"/",sep="")
Disc = list(c(1:5),c(20:24))
Disc
Disc = list(c(1:5),c(21:24))
Disc
subsample.folder.name = c("188701","188702")
path = paste(getwd(),"/",sep="")
DRenv = c(2,3)
DRenv.error = c(0.1,0.2)
begin.signal.integral = c(5, 5)
end.signal.integral = c(10, 10)
begin.background.integral = c(350, 350)
end.background.integral = c(400, 400)
Disc = list(c(1:5),c(21:24))
# setup folder paths
folder = paste(path, subsample.folder.name, sep ="")
for (j in 1:length(folder)){ dir.create(path = folder[j]) }
BayLum_files_path = paste(folder,"/",sep="")
if(!is.null(Disc)) {
# Disc
for (j in 1:length(BayLum_files_path)) { write.csv(data.frame("position" = position[[1]]), paste(BayLum_files_path[j],"Disc.csv",sep=""), row.names = F) }
}
if(!is.null(Disc)) {
# Disc
for (j in 1:length(BayLum_files_path)) { write.csv(data.frame("position" = Disc[[1]]), paste(BayLum_files_path[j],"Disc.csv",sep=""), row.names = F) }
}
if(!is.null(Disc)) {
# Disc
for (j in 1:length(BayLum_files_path)) { write.csv(data.frame("position" = Disc[[j]]), paste(BayLum_files_path[j],"Disc.csv",sep=""), row.names = F) }
}
if(!is.null(DiscPos)) {
# Disc
for (j in 1:length(BayLum_files_path)) { write.csv(data.frame("position" = DiscPos[[j]][,1], "grain" = DiscPos[[j]][,2]), paste(BayLum_files_path[j],"DiscPos.csv",sep=""), row.names = F) }
}
DiscPos = NULL
if(!is.null(DiscPos)) {
# Disc
for (j in 1:length(BayLum_files_path)) { write.csv(data.frame("position" = DiscPos[[j]][,1], "grain" = DiscPos[[j]][,2]), paste(BayLum_files_path[j],"DiscPos.csv",sep=""), row.names = F) }
}
# DoseEnv
for (j in 1:length(BayLum_files_path)) { write.csv(data.frame("obs"=DRenv[j] , "var" = DRenv.error[j]^2), paste(BayLum_files_path[j],"DoseEnv.csv",sep=""), row.names = F) }
DRSource = c(0.2,0.3)
DRenv.error = c(0.0001,0.0002)
DRenv.error = c(0.0001,0.0002)
# DoseEnv
for (j in 1:length(BayLum_files_path)) { write.csv(data.frame("obs"=DRenv[j] , "var" = DRenv.error[j]^2), paste(BayLum_files_path[j],"DoseEnv.csv",sep=""), row.names = F) }
# DoseSource
for (j in 1:length(BayLum_files_path)) { write.csv(data.frame("obs"=DRsource[j] , "var" = DRsource.error[j]^2), paste(BayLum_files_path[j],"DoseSource.csv",sep=""), row.names = F) }
DRsource = c(0.2,0.3)
DRsource.error = c(0.0001,0.0002)
# DoseEnv
for (j in 1:length(BayLum_files_path)) { write.csv(data.frame("obs"=DRenv[j] , "var" = DRenv.error[j]^2), paste(BayLum_files_path[j],"DoseEnv.csv",sep=""), row.names = F) }
# DoseSource
for (j in 1:length(BayLum_files_path)) { write.csv(data.frame("obs"=DRsource[j] , "var" = DRsource.error[j]^2), paste(BayLum_files_path[j],"DoseSource.csv",sep=""), row.names = F) }
# rule
for (j in 1:length(BayLum_files_path)) {
write.csv(data.frame("[Param]" = c(
paste("beginSignal=",begin.signal.integral[j], sep=" "),
paste("endSignal=",end.signal.integral[j], sep=" "),
paste("beginBackground=",begin.background.integral[j], sep=" "),
paste("endBackground=",end.background.integral[j], sep=" "),
paste("beginTest=",begin.signal.integral[j], sep=" "),
paste("endTest=",end.signal.integral[j], sep=" "),
paste("beginTestBackground=",begin.background.integral[j], sep=" "),
paste("endTestBackground=",end.background.integral[j], sep=" "),
paste("inflatePercent=",inflatePercent[j], sep=" "),
paste("nbOfLastCycleToRemove=",nbOfLastCycleToRemove[j], sep=" ")
), check.names = FALSE), paste(BayLum_files_path[j],"rule.csv",sep=""), row.names = F, quote = F)
}
inflatePercent = 0.025
# rule
for (j in 1:length(BayLum_files_path)) {
write.csv(data.frame("[Param]" = c(
paste("beginSignal=",begin.signal.integral[j], sep=" "),
paste("endSignal=",end.signal.integral[j], sep=" "),
paste("beginBackground=",begin.background.integral[j], sep=" "),
paste("endBackground=",end.background.integral[j], sep=" "),
paste("beginTest=",begin.signal.integral[j], sep=" "),
paste("endTest=",end.signal.integral[j], sep=" "),
paste("beginTestBackground=",begin.background.integral[j], sep=" "),
paste("endTestBackground=",end.background.integral[j], sep=" "),
paste("inflatePercent=",inflatePercent[j], sep=" "),
paste("nbOfLastCycleToRemove=",nbOfLastCycleToRemove[j], sep=" ")
), check.names = FALSE), paste(BayLum_files_path[j],"rule.csv",sep=""), row.names = F, quote = F)
}
nbOfLastCycleToRemove=2
# rule
for (j in 1:length(BayLum_files_path)) {
write.csv(data.frame("[Param]" = c(
paste("beginSignal=",begin.signal.integral[j], sep=" "),
paste("endSignal=",end.signal.integral[j], sep=" "),
paste("beginBackground=",begin.background.integral[j], sep=" "),
paste("endBackground=",end.background.integral[j], sep=" "),
paste("beginTest=",begin.signal.integral[j], sep=" "),
paste("endTest=",end.signal.integral[j], sep=" "),
paste("beginTestBackground=",begin.background.integral[j], sep=" "),
paste("endTestBackground=",end.background.integral[j], sep=" "),
paste("inflatePercent=",inflatePercent[j], sep=" "),
paste("nbOfLastCycleToRemove=",nbOfLastCycleToRemove[j], sep=" ")
), check.names = FALSE), paste(BayLum_files_path[j],"rule.csv",sep=""), row.names = F, quote = F)
}
nbOfLastCycleToRemove[j]
nbOfLastCycleToRemove
length(begin.signal.integral)
begin.signal.integral = 5
length(begin.signal.integral)
length(begin.signal.integral) != length(subsample.folder.names)
subsample.folder.names = c("188701","188702")
length(begin.signal.integral) != length(subsample.folder.names)
length(begin.signal.integral) == 1
if(length(begin.signal.integral) == 1) {rep(begin.signal.integral, length(subsample.folder.names))}
if(length(begin.signal.integral) == 1) {begin.signal.integral = rep(begin.signal.integral, length(subsample.folder.names))}
if(length(begin.signal.integral) == 1) {begin.signal.integral = rep(begin.signal.integral, length(subsample.folder.names))}
subsample.folder.names = 18801:18803
subsample.folder.names
path = paste(getwd(),"/",sep="")
DRenv = c(1,2,3)
DRenv.error = c(0.1,0.2,0.3)
DRsource = c(0.1,0.2,0.3)
DRsource.error = c(0.0001,0.0002,0.0003)
begin.signal.integral = 5
subsample.folder.names = 18801:18803
path = paste(getwd(),"/",sep="")
DRenv = c(1,2,3)
DRenv.error = c(0.1,0.2,0.3)
DRsource = c(0.1,0.2,0.3)
DRsource.error = c(0.0001,0.0002,0.0003)
begin.signal.integral = 5
end.signal.integral = c(8,9,10)
begin.background.integral = 350
end.background.integral = 395
Disc = list(c(1:5),c(21:24), c(40:48))
subsample.folder.names = 18801:18803
path = paste(getwd(),"/",sep="")
DRenv = c(1,2,3)
DRenv.error = c(0.1,0.2,0.3)
DRsource = c(0.1,0.2,0.3)
DRsource.error = c(0.0001,0.0002,0.0003)
begin.signal.integral = 5
end.signal.integral = c(8,9,10)
begin.background.integral = 350
end.background.integral = 395
Disc = list(c(1:5),c(21:24), c(40:48))
DiscPos = NULL
# setup folder paths
folder = paste(path, subsample.folder.names, sep ="")
for (j in 1:length(folder)){ dir.create(path = folder[j]) }
BayLum_files_path = paste(folder,"/",sep="")
if(!is.null(Disc)) {
# Disc
for (j in 1:length(BayLum_files_path)) { write.csv(data.frame("position" = Disc[[j]]), paste(BayLum_files_path[j],"Disc.csv",sep=""), row.names = F) }
}
if(!is.null(DiscPos)) {
# Disc
for (j in 1:length(BayLum_files_path)) { write.csv(data.frame("position" = DiscPos[[j]][,1], "grain" = DiscPos[[j]][,2]), paste(BayLum_files_path[j],"DiscPos.csv",sep=""), row.names = F) }
}
# DoseEnv
for (j in 1:length(BayLum_files_path)) { write.csv(data.frame("obs"=DRenv[j] , "var" = DRenv.error[j]^2), paste(BayLum_files_path[j],"DoseEnv.csv",sep=""), row.names = F) }
# DoseSource
for (j in 1:length(BayLum_files_path)) { write.csv(data.frame("obs"=DRsource[j] , "var" = DRsource.error[j]^2), paste(BayLum_files_path[j],"DoseSource.csv",sep=""), row.names = F) }
if(length(begin.signal.integral) == 1) {begin.signal.integral = rep(begin.signal.integral, length(subsample.folder.names))}
if(length(end.signal.integral) == 1) {end.signal.integral = rep(end.signal.integral, length(subsample.folder.names))}
if(length(begin.background.integral) == 1) {begin.background.integral = rep(begin.background.integral, length(subsample.folder.names))}
if(length(end.background.integral) == 1) {end.background.integral = rep(end.background.integral, length(subsample.folder.names))}
if(length(inflatePercent) == 1) {inflatePercent = rep(inflatePercent, length(subsample.folder.names))}
if(length(nbOfLastCycleToRemove) == 1) {end.background.integral = rep(nbOfLastCycleToRemove, length(subsample.folder.names))}
if(length(begin.signal.integral) == 1) {begin.signal.integral = rep(begin.signal.integral, length(subsample.folder.names))}
if(length(end.signal.integral) == 1) {end.signal.integral = rep(end.signal.integral, length(subsample.folder.names))}
if(length(begin.background.integral) == 1) {begin.background.integral = rep(begin.background.integral, length(subsample.folder.names))}
if(length(end.background.integral) == 1) {end.background.integral = rep(end.background.integral, length(subsample.folder.names))}
subsample.folder.names = 18801:18803
path = paste(getwd(),"/",sep="")
DRenv = c(1,2,3)
DRenv.error = c(0.1,0.2,0.3)
DRsource = c(0.1,0.2,0.3)
DRsource.error = c(0.0001,0.0002,0.0003)
begin.signal.integral = 5
end.signal.integral = c(8,9,10)
begin.background.integral = 350
end.background.integral = 395
Disc = list(c(1:5),c(21:24), c(40:48))
DiscPos = NULL
# setup folder paths
folder = paste(path, subsample.folder.names, sep ="")
for (j in 1:length(folder)){ dir.create(path = folder[j]) }
BayLum_files_path = paste(folder,"/",sep="")
if(!is.null(Disc)) {
# Disc
for (j in 1:length(BayLum_files_path)) { write.csv(data.frame("position" = Disc[[j]]), paste(BayLum_files_path[j],"Disc.csv",sep=""), row.names = F) }
}
if(!is.null(DiscPos)) {
# Disc
for (j in 1:length(BayLum_files_path)) { write.csv(data.frame("position" = DiscPos[[j]][,1], "grain" = DiscPos[[j]][,2]), paste(BayLum_files_path[j],"DiscPos.csv",sep=""), row.names = F) }
}
# DoseEnv
for (j in 1:length(BayLum_files_path)) { write.csv(data.frame("obs"=DRenv[j] , "var" = DRenv.error[j]^2), paste(BayLum_files_path[j],"DoseEnv.csv",sep=""), row.names = F) }
# DoseSource
for (j in 1:length(BayLum_files_path)) { write.csv(data.frame("obs"=DRsource[j] , "var" = DRsource.error[j]^2), paste(BayLum_files_path[j],"DoseSource.csv",sep=""), row.names = F) }
if(length(begin.signal.integral) == 1) {begin.signal.integral = rep(begin.signal.integral, length(subsample.folder.names))}
if(length(end.signal.integral) == 1) {end.signal.integral = rep(end.signal.integral, length(subsample.folder.names))}
if(length(begin.background.integral) == 1) {begin.background.integral = rep(begin.background.integral, length(subsample.folder.names))}
if(length(end.background.integral) == 1) {end.background.integral = rep(end.background.integral, length(subsample.folder.names))}
if(length(inflatePercent) == 1) {inflatePercent = rep(inflatePercent, length(subsample.folder.names))}
if(length(nbOfLastCycleToRemove) == 1) {nbOfLastCycleToRemove = rep(nbOfLastCycleToRemove, length(subsample.folder.names))}
# rule
for (j in 1:length(BayLum_files_path)) {
write.csv(data.frame("[Param]" = c(
paste("beginSignal=",begin.signal.integral[j], sep=" "),
paste("endSignal=",end.signal.integral[j], sep=" "),
paste("beginBackground=",begin.background.integral[j], sep=" "),
paste("endBackground=",end.background.integral[j], sep=" "),
paste("beginTest=",begin.signal.integral[j], sep=" "),
paste("endTest=",end.signal.integral[j], sep=" "),
paste("beginTestBackground=",begin.background.integral[j], sep=" "),
paste("endTestBackground=",end.background.integral[j], sep=" "),
paste("inflatePercent=",inflatePercent[j], sep=" "),
paste("nbOfLastCycleToRemove=",nbOfLastCycleToRemove[j], sep=" ")
), check.names = FALSE), paste(BayLum_files_path[j],"rule.csv",sep=""), row.names = F, quote = F)
}
read.csv("18801/rule.csv")
A = read.csv("18801/rule.csv")
A
### setup
source("C:/Users/fhaba/OneDrive - Danmarks Tekniske Universitet/R/myfunctions.R")
setwd("C:/Users/fhaba/OneDrive - Danmarks Tekniske Universitet/OSLdata/K17")
# create DataFile
DF02 = Generate_DataFile_MG(
Path = "BayLumMG/",
FolderNames = c("N2"),
Nb_sample = 1,
Nb_binfile = 1,
BinPerSample = 1,
force_run1_at_a_time = T
)
DF02
library(justapackage)
detach("package:justapackage", unload = TRUE)
remove.packages("justapackage")
devtools::install_github("IMHarly/justapackage")
library(justapackage)
207701:207730
my_write_BayLum_files(
path = "desktip/BayLumMG_example",
subsample.folder.names = 207701:207730,
Disc = 1:24,
DRenv = 1, DRenv.error = 0.1,
DRsource = 0.2,DRsource.error = 0.001,
begin.signal.integral = 6,end.signal.integral = 10,
begin.background.integral = 346,end.background.integral = 395,
inflatePercent = 0.025,nbOfLastCycleToRemove = 2
)
my_write_BayLum_files(
path = "desktop/BayLumMG_example",
subsample.folder.names = 207701:207730,
Disc = 1:24,
DRenv = 1, DRenv.error = 0.1,
DRsource = 0.2,DRsource.error = 0.001,
begin.signal.integral = 6,end.signal.integral = 10,
begin.background.integral = 346,end.background.integral = 395,
inflatePercent = 0.025,nbOfLastCycleToRemove = 2
)
install.packages("devtools")
devtools::document()
devtools::document()
devtools::install_github("imgoej/justapackage")
.libPaths()
