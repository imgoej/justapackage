# rule
for (j in 1:length(BayLum_files_path)) {
write.csv(data.frame("[Param]" = c(
paste("beginSignal=",begin.signal.integral[j], sep=" "),
paste("endSignal=",end.signal.integral[j], sep=" "),
paste("beginBackground=",begin.background.integral[j], sep=" "),
paste("endBackground=",end.background.integral[j], sep=" "),
paste("beginTest=",begin.signal.integral[j], sep=" "),
paste("endTest=",end.signal.integral[j], sep=" "),
paste("beginTestBackground=",begin.background.integral[j], sep=" "),
paste("endTestBackground=",end.background.integral[j], sep=" "),
paste("inflatePercent=",inflatePercent[j], sep=" "),
paste("nbOfLastCycleToRemove=",nbOfLastCycleToRemove[j], sep=" ")
), check.names = FALSE), paste(BayLum_files_path[j],"rule.csv",sep=""), row.names = F, quote = F)
}
nbOfLastCycleToRemove=2
# rule
for (j in 1:length(BayLum_files_path)) {
write.csv(data.frame("[Param]" = c(
paste("beginSignal=",begin.signal.integral[j], sep=" "),
paste("endSignal=",end.signal.integral[j], sep=" "),
paste("beginBackground=",begin.background.integral[j], sep=" "),
paste("endBackground=",end.background.integral[j], sep=" "),
paste("beginTest=",begin.signal.integral[j], sep=" "),
paste("endTest=",end.signal.integral[j], sep=" "),
paste("beginTestBackground=",begin.background.integral[j], sep=" "),
paste("endTestBackground=",end.background.integral[j], sep=" "),
paste("inflatePercent=",inflatePercent[j], sep=" "),
paste("nbOfLastCycleToRemove=",nbOfLastCycleToRemove[j], sep=" ")
), check.names = FALSE), paste(BayLum_files_path[j],"rule.csv",sep=""), row.names = F, quote = F)
}
nbOfLastCycleToRemove[j]
nbOfLastCycleToRemove
length(begin.signal.integral)
begin.signal.integral = 5
length(begin.signal.integral)
length(begin.signal.integral) != length(subsample.folder.names)
subsample.folder.names = c("188701","188702")
length(begin.signal.integral) != length(subsample.folder.names)
length(begin.signal.integral) == 1
if(length(begin.signal.integral) == 1) {rep(begin.signal.integral, length(subsample.folder.names))}
if(length(begin.signal.integral) == 1) {begin.signal.integral = rep(begin.signal.integral, length(subsample.folder.names))}
if(length(begin.signal.integral) == 1) {begin.signal.integral = rep(begin.signal.integral, length(subsample.folder.names))}
subsample.folder.names = 18801:18803
subsample.folder.names
path = paste(getwd(),"/",sep="")
DRenv = c(1,2,3)
DRenv.error = c(0.1,0.2,0.3)
DRsource = c(0.1,0.2,0.3)
DRsource.error = c(0.0001,0.0002,0.0003)
begin.signal.integral = 5
subsample.folder.names = 18801:18803
path = paste(getwd(),"/",sep="")
DRenv = c(1,2,3)
DRenv.error = c(0.1,0.2,0.3)
DRsource = c(0.1,0.2,0.3)
DRsource.error = c(0.0001,0.0002,0.0003)
begin.signal.integral = 5
end.signal.integral = c(8,9,10)
begin.background.integral = 350
end.background.integral = 395
Disc = list(c(1:5),c(21:24), c(40:48))
subsample.folder.names = 18801:18803
path = paste(getwd(),"/",sep="")
DRenv = c(1,2,3)
DRenv.error = c(0.1,0.2,0.3)
DRsource = c(0.1,0.2,0.3)
DRsource.error = c(0.0001,0.0002,0.0003)
begin.signal.integral = 5
end.signal.integral = c(8,9,10)
begin.background.integral = 350
end.background.integral = 395
Disc = list(c(1:5),c(21:24), c(40:48))
DiscPos = NULL
# setup folder paths
folder = paste(path, subsample.folder.names, sep ="")
for (j in 1:length(folder)){ dir.create(path = folder[j]) }
BayLum_files_path = paste(folder,"/",sep="")
if(!is.null(Disc)) {
# Disc
for (j in 1:length(BayLum_files_path)) { write.csv(data.frame("position" = Disc[[j]]), paste(BayLum_files_path[j],"Disc.csv",sep=""), row.names = F) }
}
if(!is.null(DiscPos)) {
# Disc
for (j in 1:length(BayLum_files_path)) { write.csv(data.frame("position" = DiscPos[[j]][,1], "grain" = DiscPos[[j]][,2]), paste(BayLum_files_path[j],"DiscPos.csv",sep=""), row.names = F) }
}
# DoseEnv
for (j in 1:length(BayLum_files_path)) { write.csv(data.frame("obs"=DRenv[j] , "var" = DRenv.error[j]^2), paste(BayLum_files_path[j],"DoseEnv.csv",sep=""), row.names = F) }
# DoseSource
for (j in 1:length(BayLum_files_path)) { write.csv(data.frame("obs"=DRsource[j] , "var" = DRsource.error[j]^2), paste(BayLum_files_path[j],"DoseSource.csv",sep=""), row.names = F) }
if(length(begin.signal.integral) == 1) {begin.signal.integral = rep(begin.signal.integral, length(subsample.folder.names))}
if(length(end.signal.integral) == 1) {end.signal.integral = rep(end.signal.integral, length(subsample.folder.names))}
if(length(begin.background.integral) == 1) {begin.background.integral = rep(begin.background.integral, length(subsample.folder.names))}
if(length(end.background.integral) == 1) {end.background.integral = rep(end.background.integral, length(subsample.folder.names))}
if(length(inflatePercent) == 1) {inflatePercent = rep(inflatePercent, length(subsample.folder.names))}
if(length(nbOfLastCycleToRemove) == 1) {end.background.integral = rep(nbOfLastCycleToRemove, length(subsample.folder.names))}
if(length(begin.signal.integral) == 1) {begin.signal.integral = rep(begin.signal.integral, length(subsample.folder.names))}
if(length(end.signal.integral) == 1) {end.signal.integral = rep(end.signal.integral, length(subsample.folder.names))}
if(length(begin.background.integral) == 1) {begin.background.integral = rep(begin.background.integral, length(subsample.folder.names))}
if(length(end.background.integral) == 1) {end.background.integral = rep(end.background.integral, length(subsample.folder.names))}
subsample.folder.names = 18801:18803
path = paste(getwd(),"/",sep="")
DRenv = c(1,2,3)
DRenv.error = c(0.1,0.2,0.3)
DRsource = c(0.1,0.2,0.3)
DRsource.error = c(0.0001,0.0002,0.0003)
begin.signal.integral = 5
end.signal.integral = c(8,9,10)
begin.background.integral = 350
end.background.integral = 395
Disc = list(c(1:5),c(21:24), c(40:48))
DiscPos = NULL
# setup folder paths
folder = paste(path, subsample.folder.names, sep ="")
for (j in 1:length(folder)){ dir.create(path = folder[j]) }
BayLum_files_path = paste(folder,"/",sep="")
if(!is.null(Disc)) {
# Disc
for (j in 1:length(BayLum_files_path)) { write.csv(data.frame("position" = Disc[[j]]), paste(BayLum_files_path[j],"Disc.csv",sep=""), row.names = F) }
}
if(!is.null(DiscPos)) {
# Disc
for (j in 1:length(BayLum_files_path)) { write.csv(data.frame("position" = DiscPos[[j]][,1], "grain" = DiscPos[[j]][,2]), paste(BayLum_files_path[j],"DiscPos.csv",sep=""), row.names = F) }
}
# DoseEnv
for (j in 1:length(BayLum_files_path)) { write.csv(data.frame("obs"=DRenv[j] , "var" = DRenv.error[j]^2), paste(BayLum_files_path[j],"DoseEnv.csv",sep=""), row.names = F) }
# DoseSource
for (j in 1:length(BayLum_files_path)) { write.csv(data.frame("obs"=DRsource[j] , "var" = DRsource.error[j]^2), paste(BayLum_files_path[j],"DoseSource.csv",sep=""), row.names = F) }
if(length(begin.signal.integral) == 1) {begin.signal.integral = rep(begin.signal.integral, length(subsample.folder.names))}
if(length(end.signal.integral) == 1) {end.signal.integral = rep(end.signal.integral, length(subsample.folder.names))}
if(length(begin.background.integral) == 1) {begin.background.integral = rep(begin.background.integral, length(subsample.folder.names))}
if(length(end.background.integral) == 1) {end.background.integral = rep(end.background.integral, length(subsample.folder.names))}
if(length(inflatePercent) == 1) {inflatePercent = rep(inflatePercent, length(subsample.folder.names))}
if(length(nbOfLastCycleToRemove) == 1) {nbOfLastCycleToRemove = rep(nbOfLastCycleToRemove, length(subsample.folder.names))}
# rule
for (j in 1:length(BayLum_files_path)) {
write.csv(data.frame("[Param]" = c(
paste("beginSignal=",begin.signal.integral[j], sep=" "),
paste("endSignal=",end.signal.integral[j], sep=" "),
paste("beginBackground=",begin.background.integral[j], sep=" "),
paste("endBackground=",end.background.integral[j], sep=" "),
paste("beginTest=",begin.signal.integral[j], sep=" "),
paste("endTest=",end.signal.integral[j], sep=" "),
paste("beginTestBackground=",begin.background.integral[j], sep=" "),
paste("endTestBackground=",end.background.integral[j], sep=" "),
paste("inflatePercent=",inflatePercent[j], sep=" "),
paste("nbOfLastCycleToRemove=",nbOfLastCycleToRemove[j], sep=" ")
), check.names = FALSE), paste(BayLum_files_path[j],"rule.csv",sep=""), row.names = F, quote = F)
}
read.csv("18801/rule.csv")
A = read.csv("18801/rule.csv")
A
### setup
source("C:/Users/fhaba/OneDrive - Danmarks Tekniske Universitet/R/myfunctions.R")
setwd("C:/Users/fhaba/OneDrive - Danmarks Tekniske Universitet/OSLdata/K17")
# create DataFile
DF02 = Generate_DataFile_MG(
Path = "BayLumMG/",
FolderNames = c("N2"),
Nb_sample = 1,
Nb_binfile = 1,
BinPerSample = 1,
force_run1_at_a_time = T
)
DF02
library(justapackage)
detach("package:justapackage", unload = TRUE)
remove.packages("justapackage")
devtools::install_github("IMHarly/justapackage")
library(justapackage)
207701:207730
my_write_BayLum_files(
path = "desktip/BayLumMG_example",
subsample.folder.names = 207701:207730,
Disc = 1:24,
DRenv = 1, DRenv.error = 0.1,
DRsource = 0.2,DRsource.error = 0.001,
begin.signal.integral = 6,end.signal.integral = 10,
begin.background.integral = 346,end.background.integral = 395,
inflatePercent = 0.025,nbOfLastCycleToRemove = 2
)
my_write_BayLum_files(
path = "desktop/BayLumMG_example",
subsample.folder.names = 207701:207730,
Disc = 1:24,
DRenv = 1, DRenv.error = 0.1,
DRsource = 0.2,DRsource.error = 0.001,
begin.signal.integral = 6,end.signal.integral = 10,
begin.background.integral = 346,end.background.integral = 395,
inflatePercent = 0.025,nbOfLastCycleToRemove = 2
)
install.packages("devtools")
devtools::document()
devtools::document()
devtools::install_github("imgoej/justapackage")
.libPaths()
devtools::install_github("imgoej/justapackage")
devtools::document()
devtools::install_github("imgoej/justapackage")
devtools::document()
#' my_calc_sem
#' @import ggplot2
#' @import Luminescence
#' @export
my_calc_sem <- function(object) {
if(sum(is.na(object)) > 0) warning("Careful of those NA's")
sd(object) / sqrt(length(object))
}
EX <- list(1 = c(1,2,3), 2 = c(4,5,6), 3 = c(7,8,9))
EX <- list(c(1,2,3), c(4,5,6), c(7,8,9))
EX
length(EX)
lapply(1:length(EX), function(i){EX[[i]][add] <- FALSE})
lapply(1:length(EX), function(i){EX[[i]][2] <- FALSE})
lapply(1:length(EX), function(i){EX[[i]][[2]] <- FALSE})
lapply(1:length(EX), function(i){EX[[i]][[2]] <- NA})
EX[[1]]
EX[[1]][2]
EX[[1]][3]
EX[[1]][c(1,2)]
EX[[1]][c(1,3)]
EX[[1]][c(1,3)] <- NA
EX
lapply(1:length(EX), function(i){EX[[i]][2] <- NA})
apply(1:length(EX), function(i){EX[[i]][2] <- NA})
apply(1:length(EX), FUN = function(i){EX[[i]][2] <- NA})
rapply(1:length(EX), FUN = function(i){EX[[i]][2] <- NA})
rapply(1:length(EX), f = function(i){EX[[i]][2] <- NA})
EX <- list(c(1,2,3), c(4,5,6), c(7,8,9))
rapply(1:length(EX), f = function(i){EX[[i]][2] <- NA})
rapply(EX, f = function(i){EX[[i]][2] <- NA})
lapply(1:length(EX), f = function(i){EX[[i]][2] <- NA})
lapply(1:length(EX), FUN = function(i){EX[[i]][2] <- NA})
lapply(1:length(EX), FUN = function(i){EX[[i]][] <- NA})
lapply(1:length(EX), FUN = function(i){EX[[i]] <- NA})
lapply(1:length(EX), FUN = function(i){EX[[i]][c(1)] <- NA})
lapply(1:length(EX), FUN = function(i){EX[[i]][c(1:3)] <- NA})
A = lapply(1:length(EX), FUN = function(i){EX[[i]][c(1:3)] <- NA})
A
EX <- list(c(1,2,3), c(4,5,6), c(7,8,9))
EX
EX[[i]]
EX[[i]]
i = 1
EX[[i]]
EX[[i]][c(1:3)]
EX[[i]][c(1:3)] <- NA
EX[[i]][c(1:3)] <- NA
EX[[i]][c(1:3)] <- NA}
EX[[i]][c(1:3)] <- NA
EX
1:length(EX)
A = lapply(1:length(EX), FUN = function(x){EX[[x]][c(1:3)] <- NA})
lapply(1:length(EX), FUN = function(x){EX[[x]][c(1:3)] <- NA})
lapply(1:length(EX), FUN = function(x){EX[[x]][c(1)] <- NA})
lapply(1:length(EX), FUN = function(x){EX[[x]][1] = NA})
EX <- list(c(1,2,3), c(4,5,6), c(7,8,9))
lapply(1:length(EX), FUN = function(x){EX[[x]][1] = NA})
EX <- list(c(1,2,3), c(4,5,6), c(7,8,9))
lapply(1:length(EX), FUN = function(x){EX[x][1] = NA})
1:length(EX)
sapply(1:length(EX), FUN = function(x){EX[[x]][1] = NA})
add = c(1,3)
lapply(1:length(EX), FUN = function(x){EX[[x]][add] = NA})
1:length(EX)
lapply(1:length(EX), FUN = function(x){EX[[x]][add] <- NA})
EX <- list(c(1,2,3), c(4,5,6), c(7,8,9))
add = c(1,3)
EX <- list(c(1,2,3), c(4,5,6), c(7,8,9))
EX
add = c(1,3)
add
1:length(EX)
add
EX
apply(1:length(EX), FUN = function(x){EX[[x]][add] <- NA})
EX[[1]][c(1,3)] <- NA
EX
EX <- list(c(1,2,3), c(4,5,6), c(7,8,9))
add = c(1,3)
for (i in 1:length(EX)) {
EX[[i]][add] <- NA
}
EX
add = c(1,3)
for (i in 1:length(EX)) {
EX[[i]][add] <- FALSE
}
EX
#' my_index_modifier
#' @export
my_index_modifier <- function(index = NULL, add = NULL, remove = NULL) {
if(!is.null(add)){
for (i in 1:length(EX)) {
EX[[i]][add] <- TRUE
}
}
if(!is.null(remove)){
for (i in 1:length(EX)) {
EX[[i]][add] <- FALSE
}
}
}
EX <- list(c(1:3),c(4:6),c(7:9))
EX <- list(c(TRUE, TRUE, TRUE),c(TRUE,TRUE,TRUE),c(TRUE,TRUE,TRUE))
EX
my_index_modifier(EX, add = NULL, remove = c(1,3))
EX
#' my_index_modifier
#' @export
my_index_modifier <- function(index = NULL, add = NULL, remove = NULL) {
if(!is.null(add)){
for (i in 1:length(EX)) {
EX[[i]][add] <- TRUE
}
}
if(!is.null(remove)){
for (i in 1:length(EX)) {
EX[[i]][remove] <- FALSE
}
}
}
EX <- list(c(TRUE, TRUE, TRUE),c(TRUE,TRUE,TRUE),c(TRUE,TRUE,TRUE))
my_index_modifier(EX, add = NULL, remove = c(1,3))
EX
#' my_index_modifier
#' @export
my_index_modifier <- function(index = NULL, add = NULL, remove = NULL) {
if(!is.null(add)){
for (i in 1:length(EX)) {
EX[[i]][add] <- TRUE
}
}
if(!is.null(remove)){
for (i in 1:length(EX)) {
EX[[i]][remove] <- FALSE
}
}
}
EX <- list(c(TRUE, TRUE, TRUE),c(TRUE,TRUE,TRUE),c(TRUE,TRUE,TRUE))
EX
my_index_modifier(index = EX, add = NULL, remove = c(1,3))
EX
#' my_index_modifier
#' @export
my_index_modifier <- function(index = NULL, add = NULL, remove = NULL) {
if(!is.null(add)){
for (i in 1:length(EX)) {
EX[[i]][add] <- TRUE
}
}
if(!is.null(remove)){
for (i in 1:length(EX)) {
EX[[i]][remove] <- FALSE
}
}
EX
}
EX <- list(c(TRUE, TRUE, TRUE),c(TRUE,TRUE,TRUE),c(TRUE,TRUE,TRUE))
my_index_modifier(index = EX, add = NULL, remove = c(1,3))
#' my_index_adjuster
#' @export
my_index_modifier <- function(index = NULL, add = NULL, remove = NULL) {
if(!is.null(add)){
for (i in 1:length(EX)) {
EX[[i]][add] <- TRUE
}
}
if(!is.null(remove)){
for (i in 1:length(EX)) {
EX[[i]][remove] <- FALSE
}
}
EX
}
devtools::document()
devtools::install_github("imgoej/justapackage")
devtools::document()
devtools::install_github("imgoej/justapackage")
#'
#' @import ggplot2
#' @import Luminescence
#'@param data 3-column data frame containing (in order) De, De.error and D0 features. Alternatively you can specify colnames or column numbers of said features (see De/De.error/D0).
#'@param minD0 Vector of D0 thresholds.
#'@param method Method of estimating central tendency in equivalent dose analysis. Currently supported are "CAM" (default) and "ADM".
#'@param De/De.error/D0 Column names of relevant variables in the OSL dataset. Selects the first three columns by default.
#'@param ... Arguments passed to CAM or ADM. For example one might be interested in specifying "log" or "sigmab" in the CAM procedure or "sigma_m" in the ADM procedure.
#'@return Returns a dataframe of equivalent doses and D0 thresholds along with intersect coordinate(s) and error estimates.
#'@export
cam_per_d0 <- function(data, minD0, method = "CAM", error.mode = "propagate", ...) {
argg <- c(as.list(environment()), list(...))
argg <- do.call(cbind, argg[lengths(argg) == 1])
colnames(data) <- c("De", "De.error", "D0")
unsatDATA <- data[my_complete_cases(data[, c("De", "De.error", "D0")]), ]
satDATA <- data[!my_complete_cases(data[, c("De", "De.error")]), ]
satDATA <- satDATA[!is.na(satDATA[, "D0"]), ]
minD0 <- minD0[minD0 <= max(unsatDATA[, "D0"])]
DATA.print <- lapply(minD0, function(x) {
unsatDATA.tmp <- unsatDATA[unsatDATA[, "D0"] >= x,]
n <- nrow(unsatDATA.tmp)
nsaturated <- nrow(satDATA[satDATA[, "D0"] >= x, ])
if(nrow(unsatDATA.tmp) > 1 & x < max(unsatDATA[, "D0"])) {
if(method == "CAM")
DATA.tmp <- get_RLum(calc_CentralDose(
unsatDATA.tmp[, c("De", "De.error")],
plot = FALSE,
verbose = FALSE,
...))[1:4]
if(method == "ADM")
DATA.tmp <- get_RLum(calc_AverageDose(
unsatDATA.tmp[, c("De", "De.error")],
plot = F,
verbose = F,
...))[1:2]
DATA.tmp <- as.data.frame(DATA.tmp)
DATA.tmp <- cbind.data.frame(DATA.tmp, "n" = n, "nsaturated" = nsaturated, "nsaturatedPROP" = nsaturated/(nsaturated+n), argg)
} else {DATA.tmp <- NA
warning("Some of the chosen D0 thresholds contain less than two observations and cannot be evaluated")}
return(DATA.tmp)
})
DATA.print <- do.call(rbind, DATA.print)
DATA.print <- cbind.data.frame("minD0" = minD0, DATA.print)
colnames(DATA.print)[2:3] <- c("de", "de.error")
DATA <- DATA.print[!is.na(DATA.print[, "de"]), ]
above <- DATA$de > DATA$minD0
if(sum(abs(diff(above))) == 0) {
intersect.results <- data.frame("intersect" = 0, "x-coordinates" = 0, "x-error" = 0, "y-coordinates" = 0, "y-error" = 0)
intersect.x = 0
intersect.y = 0
intersect.points.start = NULL
intersect.points.end = NULL
segment_data <- data.frame(
"x" = 0,
"xend" = 2,
"y" = 2,
"yend" = 2
)
ggplotlist <- list()
} else {
intersect.points.start <- which(diff(above) != 0)
intersect.points.end <- intersect.points.start+1
slopes <- (DATA$de[intersect.points.end] - DATA$de[intersect.points.start]) / (DATA$minD0[intersect.points.end] - DATA$minD0[intersect.points.start])
yintercepts <- DATA$de[intersect.points.end]-slopes*DATA$minD0[intersect.points.end]
intersect.x = (yintercepts-0) / (1-slopes)
intersect.y = yintercepts + intersect.x*slopes
segment_data <- data.frame(
"x" = 0,
"xend" = intersect.x,
"y" = intersect.x,
"yend" = intersect.x
)
x1 = DATA$minD0[intersect.points.start]
x2 = DATA$minD0[intersect.points.end]
y1 = DATA$de[intersect.points.start]
y2 = DATA$de[intersect.points.end]
if(error.mode == "propagate") {
dy1 = -(( (x2-x1)*(y2-x2) ) / (y1-y2+x2-x1)^2)
dy2 = ( (x2-x1)*(y1-x1) ) / (y2-y1-x2+x1)^2
dx = abs(dy1*DATA$de.error[intersect.points.start]) + abs(dy2*DATA$de.error[intersect.points.end])
}
if(error.mode == "w.error"){
distance = abs(x2-x1)
dratios = (intersect.x-x1)/distance
dx = DATA$de.error[intersect.points.start]*(1-dratios)+DATA$de.error[intersect.points.end]*dratios
}
intersect.results = data.frame("intersect" = 1:nrow(DATA.print), "x.y.coordinate" = NA, "error" = NA)
intersect.results[1:length(intersect.x), c("x.y.coordinate", "error")] <- cbind(intersect.x, dx)
ggplotlist <- list(geom_segment(data = segment_data, aes(x = x, xend = xend, y = y, yend = yend), linetype = "dashed", color = "red"),
geom_segment(data = segment_data, aes(x = xend, xend = xend, y = x, yend = yend), linetype = "dashed", color  = "red"),
geom_segment(data = segment_data, aes(x = DATA$minD0[intersect.points.start], xend = DATA$minD0[intersect.points.end], y = DATA$de[intersect.points.start], yend = DATA$de[intersect.points.end]), linetype = "dashed"))
}
legenddata <- data.frame("label" = c(method, "1to1 line", "Regression line", "intersect line"), "dummyx" = 0, "dummyy" = 0)
suppressMessages(
p <- ggplot(DATA, aes(x = minD0, y = de)) + geom_point(size = 3, shape = 23, fill = "black") + geom_errorbar(aes(ymin = de-de.error, ymax = de+de.error, width = 0.1*max(de))) + xlim(0, max(DATA$de)*2) + ylim(0, max(minD0)*2) + scale_x_continuous(breaks = minD0) +
ggplotlist +
geom_abline(size = 0.2) + theme_classic() +
ylab(bquote("D"["e"])) + xlab("D0 threshold") +
geom_line(data = legenddata, aes(x = dummyx, y = dummyy, color = label, linetype = label)) + scale_linetype_manual(values = c("solid", "blank","dashed", "dashed")) + scale_color_manual(values = c("black", "black", "red", "black")) +
geom_point(data = legenddata, aes(x = DATA$minD0[1], y = DATA$de[1], alpha = label), shape = 23, size = 3, fill = "black") + scale_alpha_manual(values = c(0,1,0,0)) +
theme(legend.position = c(1, 1), legend.justification = c(1,1), legend.title = element_blank())
)
cat("\n----------------------------------------------------------------------------------\n")
cat(">> Results << ")
cat("\n----------------------------------------------------------------------------------\n")
print.data.frame(DATA.print, print.gap = 2, digits = 4, row.names = F)
cat("\n----------------------------------------------------------------------------------\n")
cat(">> intersects << ")
cat("\n----------------------------------------------------------------------------------\n")
print.data.frame(intersect.results, row.names = F)
if(sum(abs(diff(above))) == 0) print("I could not find any intersects")
suppressMessages (print(p))
return(list(DATA.print, intersect.results))
}
A <- read_csv("C:/Users/fhaba/OneDrive - Danmarks Tekniske Universitet/projects/baylum_survey/for_test.csv")
A <- read.csv("C:/Users/fhaba/OneDrive - Danmarks Tekniske Universitet/projects/baylum_survey/for_test.csv")
A$X
library(ggplot2)
library(Luminescence)
A
cam_per_d0(A[, c("De","De.Error","D01")], minD0 = seq(0,200,20),method = "CAM")
#' my complete cases
#'
#' @export
my_complete_cases <- function(data) {
data <- do.call(data.frame, lapply(data, function(x) replace(x, is.infinite(x), NA)))
complete.cases(data)
}
cam_per_d0(A[, c("De","De.Error","D01")], minD0 = seq(0,200,20),method = "CAM")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
